// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: lexer.flex

package ir.ac.sbu.Lexer;
import java.io.IOException;
import ir.ac.sbu.Parser.Lexical;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class SyntaxRecognition implements Lexical {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int String_state = 2;
  public static final int Character_begin = 4;
  public static final int Character_finish = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\0\4\30\1\31"+
    "\1\32\5\33\1\34\13\33\1\35\2\33\1\36\1\0"+
    "\1\37\1\40\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\33\1\53\1\54"+
    "\1\33\1\55\1\56\1\57\1\33\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\35\1\33\1\66\1\0\1\67"+
    "\1\0\1\70\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\22\25\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\11\1\43\1\44"+
    "\1\45\1\46\1\0\1\2\1\47\1\0\1\50\1\0"+
    "\1\51\1\52\1\53\11\25\1\54\7\25\1\55\1\56"+
    "\3\25\1\57\12\25\1\60\2\0\1\46\1\61\1\62"+
    "\12\25\1\63\2\25\1\64\2\25\1\65\1\25\1\66"+
    "\1\67\17\25\1\61\1\70\1\71\1\25\1\72\1\25"+
    "\1\73\1\74\4\25\1\75\4\25\1\76\1\77\12\25"+
    "\1\100\1\25\1\101\2\25\1\61\1\102\1\103\1\104"+
    "\3\25\1\105\1\106\6\25\1\107\5\25\1\110\1\25"+
    "\1\111\1\61\2\25\1\112\3\25\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\25\1\61\1\25"+
    "\1\123\1\124\1\25\1\125\1\25\1\61\1\126\1\127"+
    "\1\130\2\61\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\344\0\u011d\0\u0156"+
    "\0\344\0\344\0\344\0\344\0\344\0\344\0\u018f\0\u01c8"+
    "\0\344\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\344\0\344"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\344\0\344\0\344\0\u0402"+
    "\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca"+
    "\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792"+
    "\0\u07cb\0\344\0\344\0\344\0\344\0\344\0\344\0\344"+
    "\0\344\0\344\0\344\0\344\0\344\0\344\0\344\0\u0804"+
    "\0\u083d\0\u0876\0\344\0\u08af\0\344\0\u08e8\0\344\0\344"+
    "\0\344\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u03c9\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u03c9"+
    "\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\u0f96\0\u0fcf\0\344\0\u1008\0\u1041\0\u1041\0\u107a\0\u03c9"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u12b4\0\u03c9\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u03c9\0\u140a\0\u03c9\0\u03c9\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u179a\0\344\0\u03c9\0\u17d3\0\u03c9"+
    "\0\u180c\0\u03c9\0\u03c9\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u03c9"+
    "\0\u1929\0\u1962\0\u199b\0\u19d4\0\u03c9\0\u03c9\0\u1a0d\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u03c9\0\u1c47\0\u03c9\0\u1c80\0\u1cb9\0\u1cf2\0\u03c9\0\u03c9"+
    "\0\u03c9\0\u1d2b\0\u1d64\0\u1d9d\0\u03c9\0\u03c9\0\u1dd6\0\u1e0f"+
    "\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u03c9\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u03c9\0\u2049\0\u03c9\0\u2082\0\u20bb\0\u20f4"+
    "\0\u03c9\0\u212d\0\u2166\0\u219f\0\u03c9\0\u03c9\0\u03c9\0\u03c9"+
    "\0\u03c9\0\u03c9\0\u03c9\0\u03c9\0\u21d8\0\u2211\0\u224a\0\u03c9"+
    "\0\u03c9\0\u2283\0\u03c9\0\u22bc\0\u22f5\0\u03c9\0\u03c9\0\u03c9"+
    "\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd"+
    "\0\u24f6\0\u252f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\6\34"+
    "\1\35\1\36\1\37\1\5\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\34\1\47\1\34\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\34\1\62\1\63\5\64\1\65\63\64\10\66\1\67"+
    "\60\66\10\70\1\71\60\70\73\0\1\6\114\0\1\72"+
    "\70\0\1\73\56\0\1\74\11\0\1\75\60\0\1\76"+
    "\7\0\1\77\63\0\2\100\61\0\1\101\4\0\1\102"+
    "\5\0\1\103\61\0\1\100\1\0\2\26\6\0\1\104"+
    "\2\0\1\105\1\106\10\0\1\104\5\0\1\105\33\0"+
    "\1\100\1\0\2\26\6\0\1\104\2\0\1\105\11\0"+
    "\1\104\5\0\1\105\42\0\1\107\70\0\1\110\70\0"+
    "\1\111\63\0\2\34\5\0\6\34\3\0\26\34\23\0"+
    "\2\34\5\0\6\34\3\0\14\34\1\112\5\34\1\113"+
    "\3\34\23\0\2\34\5\0\6\34\3\0\5\34\1\114"+
    "\7\34\1\115\1\34\1\116\6\34\23\0\2\34\5\0"+
    "\6\34\3\0\1\34\1\117\6\34\1\120\4\34\1\121"+
    "\10\34\23\0\2\34\5\0\6\34\3\0\5\34\1\122"+
    "\7\34\1\123\10\34\23\0\2\34\5\0\6\34\3\0"+
    "\13\34\1\124\1\125\11\34\23\0\2\34\5\0\6\34"+
    "\3\0\1\34\1\126\11\34\1\127\1\34\1\130\4\34"+
    "\1\131\3\34\23\0\2\34\5\0\6\34\3\0\15\34"+
    "\1\132\10\34\23\0\2\34\5\0\6\34\3\0\6\34"+
    "\1\133\5\34\1\134\11\34\23\0\2\34\5\0\6\34"+
    "\3\0\15\34\1\135\10\34\23\0\2\34\5\0\6\34"+
    "\3\0\5\34\1\136\7\34\1\137\10\34\23\0\2\34"+
    "\5\0\6\34\3\0\17\34\1\140\6\34\23\0\2\34"+
    "\5\0\6\34\3\0\17\34\1\141\6\34\23\0\2\34"+
    "\5\0\6\34\3\0\5\34\1\142\20\34\23\0\2\34"+
    "\5\0\6\34\3\0\10\34\1\143\1\144\7\34\1\145"+
    "\2\34\1\146\1\34\23\0\2\34\5\0\6\34\3\0"+
    "\17\34\1\147\6\34\23\0\2\34\5\0\6\34\3\0"+
    "\14\34\1\150\11\34\23\0\2\34\5\0\6\34\3\0"+
    "\15\34\1\151\10\34\23\0\2\34\5\0\6\34\3\0"+
    "\10\34\1\152\15\34\23\0\2\100\6\0\1\104\1\153"+
    "\13\0\1\104\1\153\21\0\13\101\1\154\55\101\2\102"+
    "\2\0\65\102\14\0\1\155\1\0\1\155\2\0\2\156"+
    "\67\0\2\157\5\0\3\157\7\0\6\157\42\0\2\34"+
    "\5\0\6\34\3\0\4\34\1\160\21\34\23\0\2\34"+
    "\5\0\6\34\3\0\21\34\1\161\4\34\23\0\2\34"+
    "\5\0\6\34\3\0\7\34\1\162\16\34\23\0\2\34"+
    "\5\0\6\34\3\0\15\34\1\163\10\34\23\0\2\34"+
    "\5\0\6\34\3\0\5\34\1\164\20\34\23\0\2\34"+
    "\5\0\6\34\3\0\20\34\1\165\5\34\23\0\2\34"+
    "\5\0\6\34\3\0\1\34\1\166\24\34\23\0\2\34"+
    "\5\0\6\34\3\0\14\34\1\167\11\34\23\0\2\34"+
    "\5\0\6\34\3\0\6\34\1\170\17\34\23\0\2\34"+
    "\5\0\6\34\3\0\22\34\1\171\3\34\23\0\2\34"+
    "\5\0\6\34\3\0\20\34\1\172\5\34\23\0\2\34"+
    "\5\0\6\34\3\0\4\34\1\173\21\34\23\0\2\34"+
    "\5\0\6\34\3\0\13\34\1\174\12\34\23\0\2\34"+
    "\5\0\6\34\3\0\15\34\1\175\10\34\23\0\2\34"+
    "\5\0\6\34\3\0\17\34\1\176\6\34\23\0\2\34"+
    "\5\0\6\34\3\0\14\34\1\177\11\34\23\0\2\34"+
    "\5\0\6\34\3\0\21\34\1\200\4\34\23\0\2\34"+
    "\5\0\6\34\3\0\21\34\1\201\4\34\23\0\2\34"+
    "\5\0\6\34\3\0\14\34\1\202\11\34\23\0\2\34"+
    "\5\0\6\34\3\0\24\34\1\203\1\34\23\0\2\34"+
    "\5\0\6\34\3\0\21\34\1\204\4\34\23\0\2\34"+
    "\5\0\6\34\3\0\11\34\1\205\14\34\23\0\2\34"+
    "\5\0\6\34\3\0\3\34\1\206\12\34\1\207\2\34"+
    "\1\210\4\34\23\0\2\34\5\0\6\34\3\0\15\34"+
    "\1\211\10\34\23\0\2\34\5\0\6\34\3\0\7\34"+
    "\1\212\15\34\1\213\23\0\2\34\5\0\6\34\3\0"+
    "\1\34\1\214\15\34\1\215\6\34\23\0\2\34\5\0"+
    "\6\34\3\0\11\34\1\216\14\34\23\0\2\34\5\0"+
    "\6\34\3\0\22\34\1\217\3\34\23\0\2\34\5\0"+
    "\6\34\3\0\21\34\1\220\4\34\23\0\2\34\5\0"+
    "\6\34\3\0\11\34\1\221\1\34\1\222\12\34\23\0"+
    "\2\34\5\0\6\34\3\0\11\34\1\223\14\34\2\0"+
    "\13\101\1\154\4\101\1\6\50\101\21\0\2\156\67\0"+
    "\2\224\5\0\3\224\1\0\1\225\5\0\6\224\4\0"+
    "\1\225\35\0\2\34\5\0\6\34\3\0\15\34\1\226"+
    "\10\34\23\0\2\34\5\0\6\34\3\0\11\34\1\227"+
    "\14\34\23\0\2\34\5\0\6\34\3\0\13\34\1\230"+
    "\12\34\23\0\2\34\5\0\6\34\3\0\1\34\1\231"+
    "\24\34\23\0\2\34\5\0\6\34\3\0\5\34\1\232"+
    "\20\34\23\0\2\34\5\0\6\34\3\0\17\34\1\233"+
    "\6\34\23\0\2\34\5\0\6\34\3\0\20\34\1\234"+
    "\1\235\4\34\23\0\2\34\5\0\6\34\3\0\1\34"+
    "\1\236\24\34\23\0\2\34\5\0\6\34\3\0\2\34"+
    "\1\237\23\34\23\0\2\34\5\0\6\34\3\0\5\34"+
    "\1\240\20\34\23\0\2\34\5\0\6\34\3\0\20\34"+
    "\1\241\5\34\23\0\2\34\5\0\6\34\3\0\1\34"+
    "\1\242\24\34\23\0\2\34\5\0\6\34\3\0\5\34"+
    "\1\243\20\34\23\0\2\34\5\0\6\34\3\0\3\34"+
    "\1\244\22\34\23\0\2\34\5\0\6\34\3\0\15\34"+
    "\1\245\10\34\23\0\2\34\5\0\6\34\3\0\7\34"+
    "\1\246\16\34\23\0\2\34\5\0\6\34\3\0\14\34"+
    "\1\247\11\34\23\0\2\34\5\0\6\34\3\0\15\34"+
    "\1\250\10\34\23\0\2\34\5\0\6\34\3\0\5\34"+
    "\1\251\20\34\23\0\2\34\5\0\6\34\3\0\22\34"+
    "\1\252\3\34\23\0\2\34\5\0\6\34\3\0\17\34"+
    "\1\253\6\34\23\0\2\34\5\0\6\34\3\0\14\34"+
    "\1\254\11\34\23\0\2\34\5\0\6\34\3\0\5\34"+
    "\1\255\20\34\23\0\2\34\5\0\6\34\3\0\21\34"+
    "\1\256\4\34\23\0\2\34\5\0\6\34\3\0\11\34"+
    "\1\257\14\34\23\0\2\34\5\0\6\34\3\0\21\34"+
    "\1\260\4\34\23\0\2\34\5\0\6\34\3\0\5\34"+
    "\1\261\20\34\23\0\2\34\5\0\6\34\3\0\11\34"+
    "\1\262\14\34\23\0\2\34\5\0\6\34\3\0\4\34"+
    "\1\263\21\34\23\0\2\34\5\0\6\34\3\0\1\34"+
    "\1\264\24\34\23\0\2\34\5\0\6\34\3\0\13\34"+
    "\1\265\12\34\23\0\2\266\5\0\3\266\1\0\1\225"+
    "\5\0\6\266\4\0\1\225\35\0\2\34\5\0\6\34"+
    "\3\0\14\34\1\267\11\34\23\0\2\34\5\0\6\34"+
    "\3\0\12\34\1\270\13\34\23\0\2\34\5\0\6\34"+
    "\3\0\21\34\1\271\4\34\23\0\2\34\5\0\6\34"+
    "\3\0\11\34\1\272\14\34\23\0\2\34\5\0\6\34"+
    "\3\0\22\34\1\273\3\34\23\0\2\34\5\0\6\34"+
    "\3\0\13\34\1\274\12\34\23\0\2\34\5\0\6\34"+
    "\3\0\5\34\1\275\20\34\23\0\2\34\5\0\6\34"+
    "\3\0\21\34\1\276\4\34\23\0\2\34\5\0\6\34"+
    "\3\0\1\34\1\277\24\34\23\0\2\34\5\0\6\34"+
    "\3\0\21\34\1\300\4\34\23\0\2\34\5\0\6\34"+
    "\3\0\21\34\1\301\4\34\23\0\2\34\5\0\6\34"+
    "\3\0\17\34\1\302\6\34\23\0\2\34\5\0\6\34"+
    "\3\0\1\34\1\303\24\34\23\0\2\34\5\0\6\34"+
    "\3\0\17\34\1\304\6\34\23\0\2\34\5\0\6\34"+
    "\3\0\21\34\1\305\4\34\23\0\2\34\5\0\6\34"+
    "\3\0\5\34\1\306\20\34\23\0\2\34\5\0\6\34"+
    "\3\0\15\34\1\307\10\34\23\0\2\34\5\0\6\34"+
    "\3\0\11\34\1\310\14\34\23\0\2\34\5\0\6\34"+
    "\3\0\14\34\1\311\11\34\23\0\2\34\5\0\6\34"+
    "\3\0\3\34\1\312\22\34\23\0\2\34\5\0\6\34"+
    "\3\0\13\34\1\313\12\34\23\0\2\34\5\0\6\34"+
    "\3\0\21\34\1\314\4\34\23\0\2\34\5\0\6\34"+
    "\3\0\5\34\1\315\20\34\23\0\2\316\5\0\3\316"+
    "\1\0\1\225\5\0\6\316\4\0\1\225\35\0\2\34"+
    "\5\0\6\34\3\0\14\34\1\317\11\34\23\0\2\34"+
    "\5\0\6\34\3\0\13\34\1\320\12\34\23\0\2\34"+
    "\5\0\6\34\3\0\5\34\1\321\20\34\23\0\2\34"+
    "\5\0\6\34\3\0\3\34\1\322\22\34\23\0\2\34"+
    "\5\0\6\34\3\0\11\34\1\323\14\34\23\0\2\34"+
    "\5\0\6\34\3\0\13\34\1\324\12\34\23\0\2\34"+
    "\5\0\6\34\3\0\4\34\1\325\21\34\23\0\2\34"+
    "\5\0\6\34\3\0\21\34\1\326\4\34\23\0\2\34"+
    "\5\0\6\34\3\0\14\34\1\327\11\34\23\0\2\34"+
    "\5\0\6\34\3\0\4\34\1\330\21\34\23\0\2\34"+
    "\5\0\6\34\3\0\6\34\1\331\17\34\23\0\2\34"+
    "\5\0\6\34\3\0\3\34\1\332\22\34\23\0\2\34"+
    "\5\0\6\34\3\0\7\34\1\333\16\34\23\0\2\34"+
    "\5\0\6\34\3\0\10\34\1\334\15\34\23\0\2\34"+
    "\5\0\6\34\3\0\11\34\1\335\14\34\23\0\2\336"+
    "\5\0\3\336\1\0\1\225\5\0\6\336\4\0\1\225"+
    "\35\0\2\34\5\0\6\34\3\0\22\34\1\337\3\34"+
    "\23\0\2\34\5\0\6\34\3\0\21\34\1\340\4\34"+
    "\23\0\2\34\5\0\6\34\3\0\10\34\1\341\15\34"+
    "\23\0\2\34\5\0\6\34\3\0\15\34\1\342\10\34"+
    "\23\0\2\34\5\0\6\34\3\0\14\34\1\343\11\34"+
    "\23\0\2\34\5\0\6\34\3\0\13\34\1\344\12\34"+
    "\23\0\2\345\5\0\3\345\1\0\1\225\5\0\6\345"+
    "\4\0\1\225\35\0\2\34\5\0\6\34\3\0\5\34"+
    "\1\346\20\34\23\0\2\34\5\0\6\34\3\0\14\34"+
    "\1\347\11\34\23\0\2\34\5\0\6\34\3\0\5\34"+
    "\1\350\20\34\23\0\2\351\5\0\3\351\1\0\1\225"+
    "\5\0\6\351\4\0\1\225\35\0\2\352\5\0\3\352"+
    "\1\0\1\225\5\0\6\352\4\0\1\225\35\0\2\353"+
    "\5\0\3\353\1\0\1\225\5\0\6\353\4\0\1\225"+
    "\35\0\2\354\5\0\3\354\1\0\1\225\5\0\6\354"+
    "\4\0\1\225\35\0\2\355\5\0\3\355\1\0\1\225"+
    "\5\0\6\355\4\0\1\225\35\0\2\356\5\0\3\356"+
    "\1\0\1\225\5\0\6\356\4\0\1\225\35\0\2\357"+
    "\5\0\3\357\1\0\1\225\5\0\6\357\4\0\1\225"+
    "\35\0\2\360\5\0\3\360\1\0\1\225\5\0\6\360"+
    "\4\0\1\225\35\0\2\361\5\0\3\361\1\0\1\225"+
    "\5\0\6\361\4\0\1\225\35\0\2\362\5\0\3\362"+
    "\1\0\1\225\5\0\6\362\4\0\1\225\50\0\1\225"+
    "\17\0\1\225\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9576];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\2\1\6\11\2\1\1\11\5\1\2\11"+
    "\4\1\3\11\22\1\16\11\1\1\1\0\1\1\1\11"+
    "\1\0\1\11\1\0\3\11\41\1\1\11\2\0\47\1"+
    "\1\11\125\1\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private StringBuilder str = new StringBuilder();
    private char ch;
    private Symbol currentSymbol = null;

    private Symbol symbol(String token) {
        return new Symbol(token);
    }

    private Symbol symbol(String token, Object val) {
        return new Symbol(token, val);
    }

    public Symbol currentToken() {
        return currentSymbol;
    }

    public String nextToken() {
        try {
            currentSymbol = next_token();
            return currentSymbol.getToken();
        } catch (IOException e) {
            throw new RuntimeException("Unable to get next token", e);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SyntaxRecognition(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error: Unidentified token.");
            }
            // fall through
          case 89: break;
          case 2:
            { /* do nothing */
            }
            // fall through
          case 90: break;
          case 3:
            { str = new StringBuilder();yybegin(String_state);
            }
            // fall through
          case 91: break;
          case 4:
            { return symbol("%");
            }
            // fall through
          case 92: break;
          case 5:
            { return symbol("&");
            }
            // fall through
          case 93: break;
          case 6:
            { yybegin(Character_begin);
            }
            // fall through
          case 94: break;
          case 7:
            { return symbol("(");
            }
            // fall through
          case 95: break;
          case 8:
            { return symbol(")");
            }
            // fall through
          case 96: break;
          case 9:
            { return symbol("++");
            }
            // fall through
          case 97: break;
          case 10:
            { return symbol("+");
            }
            // fall through
          case 98: break;
          case 11:
            { return symbol(",");
            }
            // fall through
          case 99: break;
          case 12:
            { return symbol("-");
            }
            // fall through
          case 100: break;
          case 13:
            { return symbol(".");
            }
            // fall through
          case 101: break;
          case 14:
            { return symbol("/");
            }
            // fall through
          case 102: break;
          case 15:
            { return symbol("const_int", Integer.parseInt(yytext()));
            }
            // fall through
          case 103: break;
          case 16:
            { return symbol(":");
            }
            // fall through
          case 104: break;
          case 17:
            { return symbol(";");
            }
            // fall through
          case 105: break;
          case 18:
            { return symbol("<");
            }
            // fall through
          case 106: break;
          case 19:
            { return symbol("=");
            }
            // fall through
          case 107: break;
          case 20:
            { return symbol(">");
            }
            // fall through
          case 108: break;
          case 21:
            { return symbol("id", yytext());
            }
            // fall through
          case 109: break;
          case 22:
            { return symbol("[");
            }
            // fall through
          case 110: break;
          case 23:
            { return symbol("]");
            }
            // fall through
          case 111: break;
          case 24:
            { return symbol("^");
            }
            // fall through
          case 112: break;
          case 25:
            { return symbol("|");
            }
            // fall through
          case 113: break;
          case 26:
            { return symbol("~");
            }
            // fall through
          case 114: break;
          case 27:
            { str.append(yytext());
            }
            // fall through
          case 115: break;
          case 28:
            { str = new StringBuilder(); yybegin(YYINITIAL); return symbol("const_string", str.toString());
            }
            // fall through
          case 116: break;
          case 29:
            { yybegin(Character_finish); ch = yytext().charAt(0);
            }
            // fall through
          case 117: break;
          case 30:
            { yybegin(YYINITIAL); System.err.println("Error: Null Character");
            }
            // fall through
          case 118: break;
          case 31:
            { yybegin(YYINITIAL); System.err.println("Error: Insufficient number of characters in ''.");
            }
            // fall through
          case 119: break;
          case 32:
            { yybegin(YYINITIAL); return symbol("const_char", ch);
            }
            // fall through
          case 120: break;
          case 33:
            { return symbol("!=");
            }
            // fall through
          case 121: break;
          case 34:
            { return symbol("*=");
            }
            // fall through
          case 122: break;
          case 35:
            { return symbol("+=");
            }
            // fall through
          case 123: break;
          case 36:
            { return symbol("--");
            }
            // fall through
          case 124: break;
          case 37:
            { return symbol("-=");
            }
            // fall through
          case 125: break;
          case 38:
            { return symbol("const_double", Double.parseDouble(yytext()));
            }
            // fall through
          case 126: break;
          case 39:
            { return symbol("/=");
            }
            // fall through
          case 127: break;
          case 40:
            { return symbol("const_long", Long.parseLong(yytext().substring(0, yytext().length() - 1)));
            }
            // fall through
          case 128: break;
          case 41:
            { return symbol("<=");
            }
            // fall through
          case 129: break;
          case 42:
            { return symbol("==");
            }
            // fall through
          case 130: break;
          case 43:
            { return symbol(">=");
            }
            // fall through
          case 131: break;
          case 44:
            { return symbol("do");
            }
            // fall through
          case 132: break;
          case 45:
            { return symbol("if");
            }
            // fall through
          case 133: break;
          case 46:
            { return symbol("in");
            }
            // fall through
          case 134: break;
          case 47:
            { return symbol("or");
            }
            // fall through
          case 135: break;
          case 48:
            { return symbol("const_float", Float.parseFloat(yytext().substring(0, yytext().length() - 1)));
            }
            // fall through
          case 136: break;
          case 49:
            { return symbol("const_int", Integer.parseInt(yytext().substring(2), 16));
            }
            // fall through
          case 137: break;
          case 50:
            { return symbol("and");
            }
            // fall through
          case 138: break;
          case 51:
            { return symbol("end");
            }
            // fall through
          case 139: break;
          case 52:
            { return symbol("for");
            }
            // fall through
          case 140: break;
          case 53:
            { return symbol("int");
            }
            // fall through
          case 141: break;
          case 54:
            { return symbol("new");
            }
            // fall through
          case 142: break;
          case 55:
            { return symbol("not");
            }
            // fall through
          case 143: break;
          case 56:
            { return symbol("const_long", Long.parseLong(yytext().substring(2, yytext().length() - 1), 16));
            }
            // fall through
          case 144: break;
          case 57:
            { return symbol("auto");
            }
            // fall through
          case 145: break;
          case 58:
            { return symbol("bool");
            }
            // fall through
          case 146: break;
          case 59:
            { return symbol("case");
            }
            // fall through
          case 147: break;
          case 60:
            { return symbol("char");
            }
            // fall through
          case 148: break;
          case 61:
            { return symbol("else");
            }
            // fall through
          case 149: break;
          case 62:
            { return symbol("goto");
            }
            // fall through
          case 150: break;
          case 63:
            { return symbol("long");
            }
            // fall through
          case 151: break;
          case 64:
            { return symbol("true");
            }
            // fall through
          case 152: break;
          case 65:
            { return symbol("void");
            }
            // fall through
          case 153: break;
          case 66:
            { return symbol("begin");
            }
            // fall through
          case 154: break;
          case 67:
            { return symbol("break");
            }
            // fall through
          case 155: break;
          case 68:
            { return symbol("const");
            }
            // fall through
          case 156: break;
          case 69:
            { return symbol("false");
            }
            // fall through
          case 157: break;
          case 70:
            { return symbol("float");
            }
            // fall through
          case 158: break;
          case 71:
            { return symbol("short");
            }
            // fall through
          case 159: break;
          case 72:
            { return symbol("until");
            }
            // fall through
          case 160: break;
          case 73:
            { return symbol("while");
            }
            // fall through
          case 161: break;
          case 74:
            { return symbol("double");
            }
            // fall through
          case 162: break;
          case 75:
            { return symbol("record");
            }
            // fall through
          case 163: break;
          case 76:
            { return symbol("repeat");
            }
            // fall through
          case 164: break;
          case 77:
            { return symbol("return");
            }
            // fall through
          case 165: break;
          case 78:
            { return symbol("signed");
            }
            // fall through
          case 166: break;
          case 79:
            { return symbol("sizeof");
            }
            // fall through
          case 167: break;
          case 80:
            { return symbol("static");
            }
            // fall through
          case 168: break;
          case 81:
            { return symbol("string");
            }
            // fall through
          case 169: break;
          case 82:
            { return symbol("switch");
            }
            // fall through
          case 170: break;
          case 83:
            { return symbol("default");
            }
            // fall through
          case 171: break;
          case 84:
            { return symbol("foreach");
            }
            // fall through
          case 172: break;
          case 85:
            { return symbol("println");
            }
            // fall through
          case 173: break;
          case 86:
            { return symbol("continue");
            }
            // fall through
          case 174: break;
          case 87:
            { return symbol("function");
            }
            // fall through
          case 175: break;
          case 88:
            { return symbol("volatile");
            }
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
